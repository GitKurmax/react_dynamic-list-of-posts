{"version":3,"sources":["components/User.js","components/Comment.js","components/Comments.js","components/Post.js","components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["User","react_default","a","createElement","Fragment","this","props","user","name","href","email","address","street","suite","city","zipcode","Component","Comment","text","author","Comments","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","closed","sign","showHide","bind","assertThisInitialized","event","setState","target","parentNode","nextElementSibling","classList","toggle","commentsList","comments","forEach","comment","push","components_Comment","key","body","className","onClick","Post","title","components_User","components_Comments","PostList","buttonText","loadPosts","loadUrl","searchResults","url","fetch","then","response","json","_this2","loaded","Promise","all","_ref","_ref2","slicedToArray","posts","users","map","post","find","id","userId","filter","postId","postComponentsList","components_Post","postComponents","forRender","newList","item","includes","value","trim","console","log","type","placeholder","onInput","App","components_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91c1ddf6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass User extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <span>{this.props.user.name}, </span>\r\n        <span><a href=\"#\">{this.props.user.email}</a>, </span>\r\n        <span>adress: </span>\r\n        <span>{this.props.user.address.street}, </span>\r\n        <span>{this.props.user.address.suite}, </span>\r\n        <span>{this.props.user.address.city}, </span>\r\n        <span>{this.props.user.address.zipcode}</span>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default User;","import React, { Component } from 'react';\r\n\r\nclass Comment extends Component {\r\n  render() {\r\n    return (\r\n      <section>\r\n        <p>{this.props.text}</p>\r\n        <p>{this.props.author}</p>\r\n        <p><a href=\"#\">{this.props.email}</a></p>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comment;","import React, { Component } from 'react';\r\nimport Comment from './Comment';\r\nimport '../css/Comments.css'\r\n\r\nclass Comments extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      closed: false,\r\n      sign: \"-\"\r\n    }\r\n\r\n    this.showHide = this.showHide.bind(this)\r\n  }\r\n\r\n  showHide(event) {\r\n    if (!this.state.closed) {\r\n      this.setState({\r\n        closed: true,\r\n        sign: '+'\r\n      });\r\n    } else {\r\n      this.setState({\r\n        closed: false,\r\n        sign: '-'\r\n      });\r\n    }\r\n    \r\n    event.target.parentNode.nextElementSibling.classList.toggle('visible');\r\n  }\r\n\r\n  render() {\r\n    const commentsList = [];\r\n    this.props.comments.forEach(comment => {\r\n      commentsList.push(\r\n        <Comment key = {comment.body} text = {comment.body} author = {comment.name} \r\n        email = {comment.email}/>  \r\n      )\r\n    });\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <h3>Comments\r\n          <button className=\"show\" onClick = {this.showHide}>{this.state.sign}</button></h3>\r\n        <section className = \"comments\">\r\n          {commentsList}\r\n        </section>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comments;","import React, { Component } from 'react';\r\nimport User from './User';\r\nimport Comments from './Comments';\r\nimport '../css/Post.css';\r\n\r\nclass Post extends Component {\r\n  render() {\r\n    return (\r\n      <div className = 'post'>\r\n        <h2>{this.props.title}</h2>\r\n        <p>{this.props.text}</p>\r\n        <p>\r\n          <User user = {this.props.user}/>          \r\n        </p>\r\n        <section className = \"comments_block\">\r\n          <Comments comments = {this.props.comments}/>          \r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Post; ","import React, { Component } from 'react';\r\nimport Post from './Post';\r\n\r\nclass PostList extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      buttonText: 'Load'\r\n    }\r\n    this.loadPosts = this.loadPosts.bind(this)\r\n    this.loadUrl = this.loadUrl.bind(this)\r\n    this.searchResults = this.searchResults.bind(this)\r\n  }\r\n\r\n  loadUrl(url) {\r\n    return fetch(url)\r\n    .then(response => response.json()).then(response => response)\r\n  }\r\n\r\n  loadPosts() {\r\n    this.setState({\r\n      loaded: \"not loaded\",\r\n      buttonText: \"Loading...\"\r\n    });\r\n\r\n    Promise.all([\r\n      this.loadUrl(\"https://jsonplaceholder.typicode.com/posts\"),\r\n      this.loadUrl(\"https://jsonplaceholder.typicode.com/users\"),\r\n      this.loadUrl(\"https://jsonplaceholder.typicode.com/comments\")\r\n    ]).then(([posts, users, comments]) => {\r\n        posts.map(post => {\r\n          post.user = users.find(user => user.id === post.userId);\r\n          post.comments = comments.filter(comment => comment.postId === post.id);\r\n      });\r\n\r\n      const postComponentsList = [];\r\n      posts.forEach((post) => {\r\n        postComponentsList.push(\r\n          <Post key = {post.id} title = {post.title} text = {post.body}\r\n          user = {post.user} comments = {post.comments}/>\r\n        )\r\n      });\r\n      \r\n      this.setState({\r\n      loaded: 'loaded',\r\n      posts: posts,\r\n      postComponents: postComponentsList,\r\n      forRender: postComponentsList\r\n    })\r\n  });\r\n  }\r\n\r\n  searchResults(event){\r\n    let newList = this.state.postComponents.filter((item => item.props.title.includes(event.target.value.trim())));\r\n    console.log(newList);\r\n    this.setState({\r\n      forRender: newList\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if(this.state.loaded === 'loaded') {\r\n      return <div>\r\n        <input type = \"text\" placeholder=\"Search...\" onInput = {this.searchResults}></input>\r\n        {this.state.forRender}\r\n      </div>\r\n    } \r\n\r\n    return (\r\n      <div>\r\n        <button onClick = {this.loadPosts}>{this.state.buttonText}</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostList;","import React from 'react';\nimport PostList from './components/PostList';\nimport './css/App.css'\n\nfunction App() {\n  return <div>\n    <PostList />\n  </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}